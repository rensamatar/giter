<?xml version="1.0" encoding="utf-8"?>
<resources>

    <string name="app_name">Giter</string>
    <string name="action_search">Settings</string>
    <string name="action_search_hint">Search...</string>

    <string name="drawer_open">Slider Menu Opened</string>
    <string name="drawer_close">Slider Menu Closed</string>

    <!-- Nav Drawer Menu Items -->
    <string-array name="nav_drawer_items">
        <item>HOME</item>
        <item>Terminology</item>
        <item>New Repository</item>
        <item>Showing&#47;Undoing</item>
        <item>Staging</item>
        <item>Publishing</item>
        <item>Updating&#47;Getting</item>
        <item>Branching</item>
    </string-array>

    <!-- Nav Drawer List Item Icons -->
    <array name="nav_drawer_icons">
        <item>@drawable/home</item>
        <item>@drawable/favorite</item>
        <item>@drawable/settings</item>
        <item>@drawable/help</item>
        <item>@drawable/help</item>
        <item>@drawable/feedback</item>
        <item>@drawable/feedback</item>
        <item>@drawable/feedback</item>
    </array>

    <!-- Content Description -->
    <string name="desc_list_item_icon">Item Icon</string>

    <!-- Terminology -->
    <string-array name="terminology_command">
        <item>repo</item>
        <item>clone</item>
        <item>fork (GitHub)</item>
        <item>commit</item>
        <item>branch</item>
        <item>master</item>
        <item>origin</item>
        <item>HEAD</item>
        <item>remote</item>
    </string-array>

    <string-array name="terminology_description">
        <item>A place where the history of your work&#47;code is stored</item>
        <item>Copy a git repository so you can add to it</item>
        <item>Create your own server side copy of someone else&quot;s repo</item>
        <item>A state of your project at a certain time</item>
        <item>A different line of development. A branch is just a &quot;label&quot; which points to a specific commit</item>
        <item>The default branch we develop in</item>
        <item>The default upstream repo (GitHub)</item>
        <item>The current branch</item>
        <item>A repository stored on another computer</item>
    </string-array>

    <!-- Repository -->
    <string-array name="new_repo_command">
        <item>git init</item>
        <item>git clone &lt;repo url&gt;</item>
        <item>git clone &lt;repo url&gt; &lt;folder name&gt;</item>
        <item>git clone &lt;repo url&gt; &#46;</item>
        <item>git remote add origin http&#58;&#47;&#47;github.com&#47;username&#47;&lt;repo name&gt;.git</item>
        <item>git remote add origin git@github.com&#58;username&#47;&lt;repo name&gt;.git</item>
        <item>git remote</item>
        <item>git remote &#45;v</item>
        <item>git remote rm &lt;remote name&gt;</item>
    </string-array>

    <string-array name="new_repo_description">
        <item>Create a repo from existing data</item>
        <item>Clone a current repo (into a folder with same name as repo)</item>
        <item>Clone a repo into a specific folder name</item>
        <item>Clone a repo into current directory (should be an empty directory)</item>
        <item>Create a remote repo named origin pointing at your GitHub repo (after you&quot;ve already created the repo on GitHub) (used if you git init since the repo you created locally isn&quot;t linked to a remote repo yet)</item>
        <item>Create a remote repo named origin pointing at your GitHub repo (using SSH url instead of HTTP url)</item>
        <item>Show the names of the remote repositories you&quot;ve set up</item>
        <item>Show the names and URLs of the remote repositories</item>
        <item>Remove a remote repository</item>
    </string-array>

    <!-- Showing/Undoing Changes -->
    <string-array name="show_undo_command">
        <item>git status</item>
        <item>git diff</item>
        <item>git diff &lt;filename&gt;</item>
        <item>git diff &lt;commit id&gt; &lt;commit id 2&gt;</item>
        <item>git log</item>
        <item>git blame &lt;filename&gt;</item>
        <item>git reset &#45;hard</item>
        <item>git revert HEAD</item>
        <item>git revert &lt;commit id&gt;</item>
    </string-array>

    <string-array name="show_undo_description">
        <item>Show the files changed</item>
        <item>Show changes to files compared to last commit</item>
        <item>Show changes in single file compared to last commit</item>
        <item>Show changes between two different commits.</item>
        <item>Show history of changes</item>
        <item>Show who changed each line of a file and when</item>
        <item>Go back to the last commit (will not delete new unstaged files)</item>
        <item>Undo&#47;revert last commit AND create a new commit</item>
        <item>Undo&#47;revert a specific commit AND create a new commit</item>
    </string-array>

    <!-- Staging -->
    <string-array name="staging_command">
        <item>git add -A</item>
        <item>git add .</item>
        <item>git add -u</item>
        <item>git rm &lt;filename&gt;</item>
        <item>git rm &lt;filename&gt; -cached</item>
    </string-array>

    <string-array name="staging_description">
        <item>Stage all files (new, modified, and deleted)</item>
        <item>Stage new and modified files (not deleted)</item>
        <item>Stage modified and deleted files (not new)</item>
        <item>Remove a file and untrack it</item>
        <item>Untrack a file only. It will still exist. Usually you will add this file to .gitignore after rm</item>
    </string-array>

    <!-- Publishing -->
    <string-array name="publishing_command">
        <item>git commit -m &quot;message&quot;</item>
        <item>git commit -am &quot;message&quot;</item>
        <item>git stash</item>
        <item>git stash list</item>
        <item>git stash apply</item>
        <item>git stash apply &lt;stash id&gt;</item>
        <item>git stash drop &lt;stash id&gt;</item>
        <item>git push</item>
        <item>git push origin &lt;local branch name&gt;</item>
        <item>git tag &lt;tag name&gt;</item>
    </string-array>

    <string-array name="publishing_description">
        <item>Commit the local changes that were staged</item>
        <item>Stage files (modified and deleted, not new) and commit</item>
        <item>Take the uncommitted work (modified tracked files and staged changes) and saves it</item>
        <item>Show list of stashes</item>
        <item>Reapply the latest stashed contents</item>
        <item>Reapply a specific stash. (stash id = stash@{2})</item>
        <item>Drop a specific stash</item>
        <item>Push your changes to the origin</item>
        <item>Push a branch to the origin</item>
        <item>Tag a version (ie v1.0). Useful for Github releases.</item>
    </string-array>

    <!-- Updating/Getting -->
    <string-array name="updating_command">
        <item>git fetch</item>
        <item>git pull</item>
        <item>git checkout -b &lt;new branch name&gt; origin&#47;&lt;branch name&gt;</item>
    </string-array>

    <string-array name="updating_description">
        <item>Get the latest changes from origin (do not merge)</item>
        <item>Get the latest changes from origin AND merge</item>
        <item>Get a remote branch from origin into a local branch (naming the branch and switching to it)</item>
    </string-array>

    <!-- Branching -->
    <string-array name="branching_command">
        <item>git branch</item>
        <item>git branch -a</item>
        <item>git branch &lt;branch name&gt;</item>
        <item>git checkout -b &lt;branch name&gt;</item>
        <item>git checkout &lt;branch name&gt;</item>
        <item>git push origin &lt;branch name&gt;</item>
        <item>git checkout -b &lt;new branch name&gt; origin&#47;&lt;branch name&gt;</item>
        <item>git push origin -delete &lt;branch name&gt;</item>
        <item>git checkout master git merge &lt;branch name&gt;</item>
        <item>git rebase &lt;branch name&gt;</item>
        <item>git cherry-pick &lt;commit id&gt;</item>
    </string-array>

    <string-array name="branching_description">
        <item>Show all branches (local)</item>
        <item>Show all branches (local and remote)</item>
        <item>Create a branch from HEAD</item>
        <item>Create a new branch and switch to it</item>
        <item>Switch to an already created branch</item>
        <item>Push a branch up to the origin (GitHub)</item>
        <item>Get a remote branch from origin into a local branch (naming the branch and switching to it)</item>
        <item>Delete a branch locally and remotely</item>
        <item>Merge a specific branch into the master branch.</item>
        <item>Take all the changes in one branch and replay them on another. Usually used in a feature branch. Rebase the master to the feature branch so you are testing your feature on the latest main code base. Then merge to the master.</item>
        <item>Merge just one specific commit from another branch to your current branch.</item>
    </string-array>


</resources>
